# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp
    call main
    halt

# create storage for 8 longs 
    .align 8
array:  .quad 0x696969
    .quad 0x696969
    .quad 0x696969
    .quad 0x696969
    .quad 0x696969
    .quad 0x696969
    .quad 0x696969
    .quad 0x696969

    .align 8
test_array: .quad 0xDDD
    .quad 0xAAA
    .quad 0xDDD
    .quad 0xBBB
    .quad 0xCCC
    .quad 0xDDD
    .quad 0xBBB
    .quad 0xDDD


main:   
    xorq %r12, %r12
    irmovq $1, %r13
    irmovq $8, %r14
    irmovq array, %rbx    
loop:
    rrmovq %r12, %rdi
    irmovq $1, %r8
    subq %r8, %rdi          # MINVAL is -1, so the argument passed to switchv is (1 + MINVAL)
    call switchv
    rrmovq %rax, %rdi
    rrmovq %rax, %rbp
    rrmovq %r12, %rsi
    call test_switchv
    andq %rax, %rax
    jne fail
    rmmovq %rbp, (%rbx)
    addq %r14, %rbx
    addq %r13, %r12         # i++
    rrmovq %r14, %r8
    subq %r12, %r8
    jg loop
    jmp success
fail:
    halt
success:
    ret


# long switchv(long idx)
# idx in rdi
switchv:    xorq %rax, %rax

    # if out of case range, jmp to default
    andq %rdi, %rdi
    jl default
    irmovq $5, %r8
    subq %rdi, %r8
    jl default

    # calculate jump table address
    irmovq $8, %rsi
    call mult
    irmovq jumptable, %r8
    addq %r8, %rax
    mrmovq (%rax), %rax

    # hack for an indirect jump
    pushq %rax
    ret

case_0:
    irmovq $0xAAA, %rax
    ret
case_2_5:
    irmovq $0xBBB, %rax
    ret
case_3:
    irmovq $0xCCC, %rax
    ret
default:
    irmovq $0xDDD, %rax
    ret

    .align 8
jumptable:  .quad case_0
    .quad default
    .quad case_2_5
    .quad case_3
    .quad default
    .quad case_2_5

# long mult(long x, long y)
# x in rdi, y in rsi
mult:   xorq %rax, %rax
    irmovq $1, %r8
    andq %rsi, %rsi
test:   je done
    addq %rdi, %rax
    subq %r8, %rsi
    jmp test
done:
    ret


# long test_switchv(long val, long idx)
# val in rdi, idx in rsi
# returns 0 on success, else 1
test_switchv:   pushq %rdi

    # calculate address of test_array[i]
    rrmovq %rsi, %rdi
    irmovq $8, %rsi
    call mult
    irmovq test_array, %r8
    addq %r8, %rax
    mrmovq (%rax), %rax

    xorq %r8, %r8
    irmovq $1, %r9
    popq %rdi
    subq %rdi, %rax
    cmovne %r9, %r8 
    rrmovq %r8, %rax
    ret
    


# Stack starts here and grows to lower addresses
	.pos 0x300
stack:
