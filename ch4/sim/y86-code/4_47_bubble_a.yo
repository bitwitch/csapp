                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 806000000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
                            | # Array of 9 elements
0x018:                      | 	.align 8
0x018: 0000000000000008     | array:  .quad 0x0800000000000000
0x020: 0000000000000003     |     .quad 0x0300000000000000
0x028: 0000000000000009     |     .quad 0x0900000000000000
0x030: 0000000000000007     |     .quad 0x0700000000000000
0x038: 0000000000000004     |     .quad 0x0400000000000000
0x040: 0000000000000002     |     .quad 0x0200000000000000
0x048: 0000000000000001     |     .quad 0x0100000000000000
0x050: 0000000000000006     |     .quad 0x0600000000000000
0x058: 0000000000000005     |     .quad 0x0500000000000000
                            | 
0x060: 30f71800000000000000 | main:   irmovq array,%rdi
0x06a: 30f60900000000000000 |     irmovq $9,%rsi
0x074: 807e00000000000000   |     call bubble_a    # bubble_a(array, 9)
0x07d: 90                   |     ret
                            | 
                            | # void bubble_a(long *data, long count)
                            | # data in %rdi, count in %rsi
0x07e: 30f00100000000000000 | bubble_a:   irmovq $1, %rax
0x088: 30f10800000000000000 |     irmovq $8, %rcx
0x092: 6106                 |     subq %rax, %rsi        # last = count - 1
0x094: 70fe00000000000000   |     jmp test_outer
0x09d: 2078                 | loop_outer: rrmovq %rdi, %r8       # &data[i]
0x09f: 6322                 |     xorq %rdx, %rdx        # i = 0
0x0a1: 70ef00000000000000   |     jmp test_inner
0x0aa: 2089                 | loop_inner: rrmovq %r8, %r9 
0x0ac: 6019                 |     addq %rcx, %r9         
0x0ae: 50a80000000000000000 |     mrmovq (%r8), %r10    # data[i]
0x0b8: 50b90000000000000000 |     mrmovq (%r9), %r11    # data[i+1]
0x0c2: 61ba                 |     subq %r11, %r10       # if (data[i+1] < data[i])
0x0c4: 71ef00000000000000   |     jle test_inner
0x0cd: 50a80000000000000000 |     mrmovq (%r8), %r10    # data[i]
0x0d7: 40a90000000000000000 |     rmmovq %r10, (%r9)    # data[i+1] = data[i]
0x0e1: 40b80000000000000000 |     rmmovq %r11, (%r8)    # data[i] = data[i+1]
0x0eb: 6002                 |     addq %rax, %rdx       # i++
0x0ed: 6018                 |     addq %rcx, %r8        # get addr of next element
0x0ef: 2069                 | test_inner: rrmovq %rsi, %r9      
0x0f1: 6129                 |     subq %rdx, %r9               
0x0f3: 76aa00000000000000   |     jg loop_inner         
0x0fc: 6106                 |     subq %rax, %rsi       # last--
0x0fe: 769d00000000000000   | test_outer: jg loop_outer
0x107: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
