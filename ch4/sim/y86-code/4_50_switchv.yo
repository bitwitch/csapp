                            | # Execution begins at address 0 
0x000:                      |     .pos 0
0x000: 30f40003000000000000 |     irmovq stack, %rsp
0x00a: 809800000000000000   |     call main
0x013: 00                   |     halt
                            | 
                            | # create storage for 8 longs 
0x018:                      |     .align 8
0x018: 6969690000000000     | array:  .quad 0x696969
0x020: 6969690000000000     |     .quad 0x696969
0x028: 6969690000000000     |     .quad 0x696969
0x030: 6969690000000000     |     .quad 0x696969
0x038: 6969690000000000     |     .quad 0x696969
0x040: 6969690000000000     |     .quad 0x696969
0x048: 6969690000000000     |     .quad 0x696969
0x050: 6969690000000000     |     .quad 0x696969
                            | 
0x058:                      |     .align 8
0x058: dd0d000000000000     | test_array: .quad 0xDDD
0x060: aa0a000000000000     |     .quad 0xAAA
0x068: dd0d000000000000     |     .quad 0xDDD
0x070: bb0b000000000000     |     .quad 0xBBB
0x078: cc0c000000000000     |     .quad 0xCCC
0x080: dd0d000000000000     |     .quad 0xDDD
0x088: bb0b000000000000     |     .quad 0xBBB
0x090: dd0d000000000000     |     .quad 0xDDD
                            | 
                            | 
0x098:                      | main:   
0x098: 63cc                 |     xorq %r12, %r12
0x09a: 30fd0100000000000000 |     irmovq $1, %r13
0x0a4: 30fe0800000000000000 |     irmovq $8, %r14
0x0ae: 30f31800000000000000 |     irmovq array, %rbx    
0x0b8:                      | loop:
0x0b8: 20c7                 |     rrmovq %r12, %rdi
0x0ba: 30f80100000000000000 |     irmovq $1, %r8
0x0c4: 6187                 |     subq %r8, %rdi          # MINVAL is -1, so the argument passed to switchv is (1 + MINVAL)
0x0c6: 800f01000000000000   |     call switchv
0x0cf: 2007                 |     rrmovq %rax, %rdi
0x0d1: 2005                 |     rrmovq %rax, %rbp
0x0d3: 20c6                 |     rrmovq %r12, %rsi
0x0d5: 80e501000000000000   |     call test_switchv
0x0de: 6200                 |     andq %rax, %rax
0x0e0: 740d01000000000000   |     jne fail
0x0e9: 40530000000000000000 |     rmmovq %rbp, (%rbx)
0x0f3: 60e3                 |     addq %r14, %rbx
0x0f5: 60dc                 |     addq %r13, %r12         # i++
0x0f7: 20e8                 |     rrmovq %r14, %r8
0x0f9: 61c8                 |     subq %r12, %r8
0x0fb: 76b800000000000000   |     jg loop
0x104: 700e01000000000000   |     jmp success
0x10d:                      | fail:
0x10d: 00                   |     halt
0x10e:                      | success:
0x10e: 90                   |     ret
                            | 
                            | 
                            | # long switchv(long idx)
                            | # idx in rdi
0x10f: 6300                 | switchv:    xorq %rax, %rax
                            | 
                            |     # if out of case range, jmp to default
0x111: 6277                 |     andq %rdi, %rdi
0x113: 727e01000000000000   |     jl default
0x11c: 30f80500000000000000 |     irmovq $5, %r8
0x126: 6178                 |     subq %rdi, %r8
0x128: 727e01000000000000   |     jl default
                            | 
                            |     # calculate jump table address
0x131: 30f60800000000000000 |     irmovq $8, %rsi
0x13b: 80c001000000000000   |     call mult
0x144: 30f89001000000000000 |     irmovq jumptable, %r8
0x14e: 6080                 |     addq %r8, %rax
0x150: 50000000000000000000 |     mrmovq (%rax), %rax
                            | 
                            |     # hack for an indirect jump
0x15a: a00f                 |     pushq %rax
0x15c: 90                   |     ret
                            | 
0x15d:                      | case_0:
0x15d: 30f0aa0a000000000000 |     irmovq $0xAAA, %rax
0x167: 90                   |     ret
0x168:                      | case_2_5:
0x168: 30f0bb0b000000000000 |     irmovq $0xBBB, %rax
0x172: 90                   |     ret
0x173:                      | case_3:
0x173: 30f0cc0c000000000000 |     irmovq $0xCCC, %rax
0x17d: 90                   |     ret
0x17e:                      | default:
0x17e: 30f0dd0d000000000000 |     irmovq $0xDDD, %rax
0x188: 90                   |     ret
                            | 
0x190:                      |     .align 8
0x190: 5d01000000000000     | jumptable:  .quad case_0
0x198: 7e01000000000000     |     .quad default
0x1a0: 6801000000000000     |     .quad case_2_5
0x1a8: 7301000000000000     |     .quad case_3
0x1b0: 7e01000000000000     |     .quad default
0x1b8: 6801000000000000     |     .quad case_2_5
                            | 
                            | # long mult(long x, long y)
                            | # x in rdi, y in rsi
0x1c0: 6300                 | mult:   xorq %rax, %rax
0x1c2: 30f80100000000000000 |     irmovq $1, %r8
0x1cc: 6266                 |     andq %rsi, %rsi
0x1ce: 73e401000000000000   | test:   je done
0x1d7: 6070                 |     addq %rdi, %rax
0x1d9: 6186                 |     subq %r8, %rsi
0x1db: 70ce01000000000000   |     jmp test
0x1e4:                      | done:
0x1e4: 90                   |     ret
                            | 
                            | 
                            | # long test_switchv(long val, long idx)
                            | # val in rdi, idx in rsi
                            | # returns 0 on success, else 1
0x1e5: a07f                 | test_switchv:   pushq %rdi
                            | 
                            |     # calculate address of test_array[i]
0x1e7: 2067                 |     rrmovq %rsi, %rdi
0x1e9: 30f60800000000000000 |     irmovq $8, %rsi
0x1f3: 80c001000000000000   |     call mult
0x1fc: 30f85800000000000000 |     irmovq test_array, %r8
0x206: 6080                 |     addq %r8, %rax
0x208: 50000000000000000000 |     mrmovq (%rax), %rax
                            | 
0x212: 6388                 |     xorq %r8, %r8
0x214: 30f90100000000000000 |     irmovq $1, %r9
0x21e: b07f                 |     popq %rdi
0x220: 6170                 |     subq %rdi, %rax
0x222: 2498                 |     cmovne %r9, %r8 
0x224: 2080                 |     rrmovq %r8, %rax
0x226: 90                   |     ret
                            |     
                            | 
                            | 
                            | # Stack starts here and grows to lower addresses
0x300:                      | 	.pos 0x300
0x300:                      | stack:
